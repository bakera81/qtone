---
import '@fontsource/inter/latin-400.css';
import '@fontsource/inter/latin-500.css';
import { ClientRouter } from 'astro:transitions';import Footer from '../components/layout/Footer.astro';
import Header from '../components/layout/Header.astro';

interface Props {
  description: string;
  title: string;
}

const recaptchaSiteKey = import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY;

const { description, title } = Astro.props;

let defaultDescription = description ? description : 'qtone is an AI tone-of-voice coach to help remote workers minimize frustration, communicate effectively, and be happier at work.';
let defaultTitle = title ? title : 'qtone Â· AI tone coach for video calls';
---

<!DOCTYPE html>
<html lang="en" x-cloak x-data :class="{ 'dark': $store.theme.isDark }">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-q.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/q-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/q-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={description} />
    <script is:inline define:vars={{ recaptchaSiteKey }}>
      window.recaptchaSiteKey = recaptchaSiteKey;
    </script>
    <script src={`https://www.google.com/recaptcha/api.js?render=${recaptchaSiteKey}`} async defer></script>
    <title>{defaultTitle}</title>
    <ClientRouter />
  </head>
  <body
    class="bg-primary-50 text-primary-950 dark:bg-primary-950 dark:text-primary-200 antialiased transition"
  >
    <Header description={defaultDescription} />
    <main>
      <slot />
    </main>
    <Footer description={defaultDescription} />
    <style is:global>
      [x-cloak] {
        display: none !important;
      }
    </style>
    <script>
      import Alpine from 'alpinejs';
      import collapse from '@alpinejs/collapse';

      Alpine.plugin(collapse);

      Alpine.store('theme', {
        init() {
          this.isDark = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
              return localStorage.getItem('theme') === 'dark';
            }
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
              return true;
            }
            return false;
          })();
        },

        isDark: false,

        toggle() {
          this.isDark = !this.isDark;
          localStorage.setItem('theme', this.isDark ? 'dark' : 'light');
        },
      });

      window.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>
</html>
